resultsQ
# rankings S
sorting = with(students, order(-MinCritS, -AveScoreS) )
resultsS = data.frame(ranking=1:nrow(students), students[sorting, c('ID','AveScoreQ','MinCritQ','AveScoreStat','Stat1','Stat2','MasterThesis','Age')])
resultsS$ranking = with(resultsS, ifelse(MinCritS=Â¨=F, NA, ranking) )
# =========================================================================
# Section:        Part 0
# SubSection:     Session 00, R
# =========================================================================
# -----------------------------------
# Task 01
# -----------------------------------
file_dir = "/home/jriveraespejo/Desktop/#Classes/4(8)_P0Q00a StatisticsV/exercise/session 01/Students.xlsx"
students = read_xlsx(file_dir)
# str(students)
# scores
students$AveScoreStat = rowMeans(students[,c('Stat1','Stat2')])
students$AveScoreQ = rowMeans(students[,c('Stat1','Stat2')]) + students$MasterThesis
students$AveScoreSocial = rowMeans(students[,c('Social','Cross-cultural','Anthropology')])
students$AveScoreS = rowMeans(students[,c('Stat1','Social')]) + students$`Cross-cultural`
# conditions
students$MinCritQ = with(students, ifelse(AveScoreStat>=12 & Age<26, TRUE, FALSE))
students$MinCritS = with(students, ifelse(AveScoreSocial>=12 & Anthropology>=14, TRUE, FALSE))
students$MinCritC = with(students, ifelse(Neurocognition>=10 & HealthPsychology>=10 & Age>=23, TRUE, FALSE))
# rankings Q
sorting = with(students, order(-MinCritQ, -AveScoreQ) )
resultsQ = data.frame(ranking=1:nrow(students), students[sorting, c('ID','AveScoreQ','MinCritQ','AveScoreStat','Stat1','Stat2','MasterThesis','Age')])
resultsQ$ranking = with(resultsQ, ifelse(MinCritQ==F, NA, ranking) )
resultsQ
# rankings S
sorting = with(students, order(-MinCritS, -AveScoreS) )
resultsS = data.frame(ranking=1:nrow(students), students[sorting, c('ID','AveScoreS','MinCritS','Social','Cross-cultural','Anthropology','Stat1')])
resultsS$ranking = with(resultsS, ifelse(MinCritS=F, NA, ranking) )
# =========================================================================
# Section:        Part 0
# SubSection:     Session 00, R
# =========================================================================
# -----------------------------------
# Task 01
# -----------------------------------
file_dir = "/home/jriveraespejo/Desktop/#Classes/4(8)_P0Q00a StatisticsV/exercise/session 01/Students.xlsx"
students = read_xlsx(file_dir)
# str(students)
# scores
students$AveScoreStat = rowMeans(students[,c('Stat1','Stat2')])
students$AveScoreQ = rowMeans(students[,c('Stat1','Stat2')]) + students$MasterThesis
students$AveScoreSocial = rowMeans(students[,c('Social','Cross-cultural','Anthropology')])
students$AveScoreS = rowMeans(students[,c('Stat1','Social')]) + students$`Cross-cultural`
# conditions
students$MinCritQ = with(students, ifelse(AveScoreStat>=12 & Age<26, TRUE, FALSE))
students$MinCritS = with(students, ifelse(AveScoreSocial>=12 & Anthropology>=14, TRUE, FALSE))
students$MinCritC = with(students, ifelse(Neurocognition>=10 & HealthPsychology>=10 & Age>=23, TRUE, FALSE))
# rankings Q
sorting = with(students, order(-MinCritQ, -AveScoreQ) )
resultsQ = data.frame(ranking=1:nrow(students), students[sorting, c('ID','AveScoreQ','MinCritQ','AveScoreStat','Stat1','Stat2','MasterThesis','Age')])
resultsQ$ranking = with(resultsQ, ifelse(MinCritQ==F, NA, ranking) )
resultsQ
# rankings S
sorting = with(students, order(-MinCritS, -AveScoreS) )
resultsS = data.frame(ranking=1:nrow(students), students[sorting, c('ID','AveScoreS','MinCritS','Social','Cross-cultural','Anthropology','Stat1')])
resultsS$ranking = with(resultsS, ifelse(MinCritS==F, NA, ranking) )
resultsS
# rankings S
sorting = with(students, order(-MinCritS, -AveScoreS) )
resultsS = data.frame(ranking=1:nrow(students), students[sorting, c('ID','AveScoreS','MinCritS','AveScoreSocial','Social','Cross-cultural','Anthropology','Stat1')])
resultsS$ranking = with(resultsS, ifelse(MinCritS==F, NA, ranking) )
resultsS
# rankings S
sorting = with(students, order(-MinCritS, -AveScoreS) )
resultsS = data.frame(ranking=1:nrow(students), students[sorting, c('ID','AveScoreS','MinCritS','AveScoreSocial','Anthropology','Social','Cross-cultural','Stat1')])
resultsS$ranking = with(resultsS, ifelse(MinCritS==F, NA, ranking) )
resultsS
str(students)
max(students[,c('Neurocognition','HealthPsychology','MasterThesis')])
sapply(students[,c('Neurocognition','HealthPsychology','MasterThesis')], max)
apply(students[,c('Neurocognition','HealthPsychology','MasterThesis')], 1, max)
students$HighestC = apply(students[,c('Neurocognition','HealthPsychology','MasterThesis')], 1, max)
# rankings C
sorting = with(students, order(-MinCritC, -HighestC) )
resultsC = data.frame(ranking=1:nrow(students), students[sorting, c('ID','HighestC','MinCritC','Neurocognition','HealthPsychology','MasterThesis')])
resultsC$ranking = with(resultsC, ifelse(MinCritC==F, NA, ranking) )
resultsC
fib = c()
fib
fib = c(fib, 1)
fib
fib = c()
fib = c(fib, 0, 1)
fib
n = 10
fib = c(fib, sum(fib[i], fib[i-1]))
i=2
fib = c(fib, sum(fib[i], fib[i-1]))
fib
fib = c(fib, sum(fib[i], fib[i-1]))
fib
fib[i]
fib[i-1]
fib = c()
fib = c(fib, 0, 1)
i=2
fib = c(fib, sum(fib[i], fib[i-1]))
i=3
fib = c(fib, sum(fib[i], fib[i-1]))
fib
i=4
fib = c(fib, sum(fib[i], fib[i-1]))
fib
i=5
fib = c(fib, sum(fib[i], fib[i-1]))
fib
i=6
fib = c(fib, sum(fib[i], fib[i-1]))
fib
fibonacci_seq = function(n){
fib = c()
fib = c(fib, 0, 1)
for(i in 2:n){
fib = c(fib, sum(fib[i], fib[i-1]))
}
fib = fib[-1]
}
fibonacci_seq(10)
fibonacci_seq = function(n){
fib = c()
fib = c(fib, 0, 1)
for(i in 2:n){
fib = c(fib, sum(fib[i], fib[i-1]))
}
fib = fib[-1]
return(fib)
}
fibonacci_seq(10)
fibonacci_seq(7)
fib = fib[-1]
fibonacci_ratio = function(n){
fib = c()
fib = c(fib, 0, 1)
for(i in 2:n){
fib = c(fib, sum(fib[i], fib[i-1]))
last_ratio = fib[i] / fib[i-1]
}
fib = fib[-1]
return(last_ratio)
}
fibonacci_ratio(7)
13/8
fibonacci_ratio = function(n){
fib = c()
fib = c(fib, 0, 1)
for(i in 2:n){
fib = c(fib, sum(fib[i], fib[i-1]))
last_ratio = round( fib[i] / fib[i-1], 3)
}
fib = fib[-1]
return(last_ratio)
}
fibonacci_ratio(7)
13/8
print(last_ratio)
fibonacci_ratio = function(n){
fib = c()
fib = c(fib, 0, 1)
for(i in 2:n){
fib = c(fib, sum(fib[i], fib[i-1]))
last_ratio = round( fib[i] / fib[i-1], 3)
print(last_ratio)
}
fib = fib[-1]
return(last_ratio)
}
fibonacci_ratio(7)
5/3
8/5
13/8
fibonacci_ratio(20)
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(1:N, fibonacci_seq(N))
fibonacci_seq(N)
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(1:N, fibonacci_ratio(N))
fibonacci_ratio(7)
fibonacci_ratio = function(n){
fib = c()
fib = c(fib, 0, 1)
for(i in 2:n){
fib = c(fib, sum(fib[i], fib[i-1]))
last_ratio = round( fib[i] / fib[i-1], 3)
# print(last_ratio)
}
return(last_ratio)
}
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(1:N, fibonacci_ratio(N))
fibonacci_ratio(N)
plot(NULL, xlim=c(1:N), ylim=c(1,3))
plot(NULL, xlim=c(1,N), ylim=c(1,3))
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(NULL, xlim=c(1,N), ylim=c(1,3))
for(i in 1:N){ points(i, fibonacci_ratio(i)) }
i=1
fibonacci_ratio(i)
fibonacci_ratio = function(n){
fib = c()
fib = c(fib, 0, 1)
for(i in 2:n){
fib = c(fib, sum(fib[i], fib[i-1]))
last_ratio = round( fib[i] / fib[i-1], 3)
# print(last_ratio)
}
return(last_ratio)
}
fibonacci_ratio(1)
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(NULL, xlim=c(1,N), ylim=c(1,3))
for(i in 2:N){ points(i, fibonacci_ratio(i)) }
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(NULL, xlim=c(1,N), ylim=c(1,3))
fibonacci_ratio(2)
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(NULL, xlim=c(1,N), ylim=c(1,3))
for(i in 3:N){ points(i, fibonacci_ratio(i)) }
fibonacci_ratio(3)
i=3
points(i, fibonacci_ratio(i))
fibonacci_ratio(i)
i
plot(NULL, xlim=c(1,N), ylim=c(1,3))
points(i, fibonacci_ratio(i))
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
plot(NULL, xlim=c(1,N), ylim=c(1,3))
points(i, fibonacci_ratio(i), add=T)
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
i = 1:N
fib_ratio = data.frame(i, ratio=fibonacci_ratio(i))
fib_ratio
fibonacci_ratio(i)
apply(i, fibonacci_ratio)
sapply(i, fibonacci_ratio)
lapply(i, fibonacci_ratio)
apply(i, 1, fibonacci_ratio)
sapply(i, fibonacci_ratio, simplify = T)
for(j in i){ fibonacci_ratio(j) }
fib_ratio = data.frame(i, ratio=for(j in i){ fibonacci_ratio(j) } )
for(j in i){ fibonacci_ratio(j) }
i
fibonacci_ratio(j)
for(j in i){ fibonacci_ratio(j) }
ratio = for(j in i){ fibonacci_ratio(j) }
ratio
fib_ratio = data.frame(i=1:N)
fib_ratio
fibonacci_ratio(fib_ratio$i)
apply(fib_ratio$i, 1, fibonacci_ratio)
apply(fib_ratio, 1, fibonacci_ratio)
apply(fib_ratio, 1, fibonacci_ratio)[1]
apply(fib_ratio, 1, fibonacci_ratio)[[1]]
apply(fib_ratio, 1, fibonacci_ratio)[1:N]
apply(fib_ratio, 1, fibonacci_ratio)[1]
apply(fib_ratio, 1, fibonacci_ratio)[[]][1]
apply(fib_ratio, 1, fibonacci_ratio)[[1:N]][1]
apply(fib_ratio, 1, fibonacci_ratio)[1:N][1]
unlist(apply(fib_ratio, 1, fibonacci_ratio) )
fib_ratio$ratio = c(NA, ratio)
plot(fib_ratio, xlim=c(1,N), ylim=c(1,3))
fib_ratio
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 30
fib_ratio = data.frame(i=1:N)
ratio = unlist( apply(fib_ratio, 1, fibonacci_ratio) )
ratio
fib_ratio$ratio = c(NA, ratio)
plot(fib_ratio, xlim=c(1,N), ylim=c(1,3))
plot(fib_ratio, xlim=c(1,N), ylim=c(0.5,2.5), type='l')
# -----------------------------------
# Task 02, 03
# -----------------------------------
N = 50
fib_ratio = data.frame(i=1:N)
ratio = unlist( apply(fib_ratio, 1, fibonacci_ratio) )
fib_ratio$ratio = c(NA, ratio)
plot(fib_ratio, xlim=c(1,N), ylim=c(0.5,2.5), type='l')
print('N = 7: ', fibonacci_seq(7) )
print( paste0('N = 7: ', fibonacci_seq(7) ) )
print( paste0('N = 7: ', paste0( fibonacci_seq(7) ) ) )
paste0( fibonacci_seq(7) )
print( paste0('N = 7: ', paste0( fibonacci_seq(7) ) ) )
paste0( fibonacci_seq(7) )
1000 * (1 + returns[1])
# -----------------------------------
# Task 03
# -----------------------------------
returns = c(1.03,0.97,1.41,0.81,0.92,1.03,1.05,2.45,2.31,0.61)
1000 * (1 + returns[1])
1000 * (1 + returns[1]/100)
returns_perc = returns/100
# -----------------------------------
# Task 03
# -----------------------------------
returns = c(1.03,0.97,1.41,0.81,0.92,1.03,1.05,2.45,2.31,0.61)
returns_perc = returns/100
returns_perc
1000 * (1 + returns_perc[1])
1000 * (1 + returns_perc)
main_inv = 1000 * (1 + returns_perc)
main_inv
main_inv[1:9]
main_inv[1:9] * (1 + returns_perc[1:9])
return_year = returns_perc * 1000
return_year
sum(return_year)
sum(return_year)/1000
mean(returns_perc)
sum(return_year)/100
sum(return_year)
sum(return_year)/1000/10
mean(returns_perc)
# investing 1000 only in the first year and leaving it
return_year = c()
return_year = c(return_year, 1000*returns_perc[1])
return_year
return_year[i-1]
i=2
return_year[i-1]
# investing 1000 only in the first year and leaving it
return_year = c()
return_year = c(return_year, 1000*(1 + returns_perc[1]) )
return_year
return_year[i-1]
for(i in 2:10){
return_year = c(return_year, return_year[i-1]*(1 + returns_perc[i]) )
}
return_year
return_year - 1000
(return_year - 1000)/1000/10
return_year - 1000
# investing 1000 only in the first year and leaving it
return_year = c()
return_year = c(return_year, 1000*(1 + returns_perc[1]) )
for(i in 2:10){
return_year = c(return_year, return_year[i-1]*(1 + returns_perc[i]) )
}
return_year
return_year = (return_year - 1000)/1000/10
return_year
mean(returns_perc)
return_year[10]
log(returns_perc)
mean(log(returns_perc))
exp(mean(log(returns_perc)))
mean(return_year)
# investing 1000 only in the first year and leaving it
return_year = c()
return_year = c(return_year, 1000*(1 + returns_perc[1]) )
for(i in 2:10){
return_year = c(return_year, return_year[i-1]*(1 + returns_perc[i]) )
}
return_year
prod( returns_perc )
prod( returns_perc )^(1/10)
file_dir = "/home/jriveraespejo/Desktop/#Classes/4(8)_P0Q00a StatisticsV/exercise/session 02/pokemon.csv"
pokemon = read.csv(file_dir)
str(pokemon)
# preliminar ####
rm(list=ls())
librerias <- c('stringr','dplyr','ggplot2','ggpubr','knitr','tidyverse',
'reshape2','tinytex','gt','haven',
'dagitty','ellipse','mvtnorm','MASS','splines','gtools',
'rethinking','rstan','coda','runjags','rjags','loo')
sapply(librerias, require, character.only=T)
install.packages('rethinking')
devtools::install_github("stan-dev/cmdstanr")
install.packages('rethinking')
devtools::install_github("rmcelreath/rethinking")
clear
librerias <- c('stringr','dplyr','ggplot2','ggpubr','knitr','tidyverse',
'reshape2','tinytex','gt','haven',
'dagitty','ellipse','mvtnorm','MASS','splines','gtools',
'rethinking','rstan','coda','runjags','rjags','loo')
sapply(librerias, require, character.only=T)
install.packages('tidyverse')
install.packages('ggpubr')
# preliminar ####
rm(list=ls())
librerias <- c('stringr','dplyr','ggplot2','ggpubr','knitr','tidyverse',
'reshape2','tinytex','gt','haven',
'dagitty','ellipse','mvtnorm','MASS','splines','gtools',
'rethinking','rstan','coda','runjags','rjags','loo')
sapply(librerias, require, character.only=T)
# sapply(librerias, install.packages, character.only=T)
setwd('~/Desktop/project_europa')
## load ####
file_dir = '/home/jriveraespejo/Desktop/project_europa/data/final/8_NLPdata.csv'
wordcloud = read.csv(file_dir)
str(wordcloud)
# train set
N = nrow(wordcloud)
N
idx = sample(1:N, size=round(N*0.9))
idx
train = rep(FALSE, N)
train[idx] = TRUE
sum(train)
data_list = list(N = nrow(wordcloud[train,]),
K = ncol(wordcloud)-1,
G = wordcloud$G[train],
W = as.matrix(wordcloud[train,-c(251:252)]) )
str(data_list)
ncol(wordcloud)
data_list = list(N = nrow(wordcloud[train,]),
K = ncol(wordcloud)-2,
G = wordcloud$G[train],
W = as.matrix(wordcloud[train,-c(251:252)]) )
mcmc_code <- "
data {
int N;
int K;
int G[N];
matrix[N, K] W;
}
parameters {
vector[K] b;
}
model {
vector[N] v; // linear predictor
vector[N] p; // probability
// priors
// LASSO prior (highly regularizing),
b ~ double_exponential(0, 0.2);
//# // highly regularizing prior (not LASSO, not multilevel)
//# b ~ normal(0, 0.2);
// model
v = W * b;
p = inv_logit(v);
G ~ bernoulli(p);
}
generated quantities{
vector[N] v; // linear predictor
vector[N] p; // probability
vector[N] log_lik; // log-likelihood
// model
v = W * b;
p = inv_logit(v);
for(i in 1:N){
log_lik[i] = bernoulli_lpmf(G[i] | p[i]);
}
}
"
save_code = file.path('notebooks', "wordcloud_model.stan" )
writeLines( mcmc_code, con=save_code)
mcmc_model <- stan( file=save_code, data=data_list, chains=4, cores=4)
# results ####
results = precis( mcmc_model, dept=2 )
idx_names = str_detect( rownames(results), '^b')
results = results[idx_names, ]
rownames(results) = names(wordcloud)[-c(251:252)]
# parameters
round( head( results[order(results$mean, decreasing = F),], 20) , 2 )
round( head( results[order(results$mean, decreasing = T),], 20), 2 )
# fit
WAIC(mcmc_model)
PSIS(mcmc_model) # some k pareto values indicate outliers
# outliers
PSIS_res = PSIS(mcmc_model, pointwise=T)
head( PSIS_res[ order(PSIS_res$k, decreasing = T), ], 10)
idx_outlier = c(385, 388, 389, 391, 396, 397)
company_names = wordcloud[train, 'Name']
company_names[idx_outlier]
rowSums( data_list$W[idx_outlier,] )
idx = paste0('b[',1:12,']')
par(mfrow=c(4,3))
traceplot_ulam(mcmc_model, pars=idx)
# posterior predictive ####
G_test = wordcloud$G[!train]
W_test = as.matrix(wordcloud[!train,-251])
W_test = as.matrix(wordcloud[!train,-c(251:252)])
post = extract.samples(mcmc_model)
post = post$b
pars_mu = apply(post, 2, mean)
pars_CI = apply(post, 2, PI, 0.95)
v = W_test %*% pars_mu
p = as.integer( inv_logit(v) >= 0.5)
table(G_test, p)
